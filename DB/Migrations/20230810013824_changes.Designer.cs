// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ResiPay.DB;

#nullable disable

namespace ResiPay.DB.Migrations
{
    [DbContext(typeof(ResiPayDbContext))]
    [Migration("20230810013824_changes")]
    partial class changes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApartmentUser", b =>
                {
                    b.Property<int>("ApartmentsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("ApartmentsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserApartments", "dbo");
                });

            modelBuilder.Entity("ResiPay.DB.Entities.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApartmentBlock")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("block");

                    b.Property<int>("ApartmentFloor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("integer")
                        .HasColumnName("no");

                    b.Property<string>("ApartmentType")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("date")
                        .HasColumnName("insert_date");

                    b.Property<bool>("IsFull")
                        .HasColumnType("boolean")
                        .HasColumnName("is_full");

                    b.Property<bool>("IsRented")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rented");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("Apartment", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentBlock = "A",
                            ApartmentFloor = 4,
                            ApartmentNumber = 44,
                            ApartmentType = "2+1",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4243),
                            IsFull = true,
                            IsRented = true,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4244)
                        },
                        new
                        {
                            Id = 2,
                            ApartmentBlock = "B",
                            ApartmentFloor = 3,
                            ApartmentNumber = 34,
                            ApartmentType = "1+1",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4272),
                            IsFull = true,
                            IsRented = true,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4272)
                        },
                        new
                        {
                            Id = 3,
                            ApartmentBlock = "C",
                            ApartmentFloor = 5,
                            ApartmentNumber = 65,
                            ApartmentType = "3+1",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4275),
                            IsFull = true,
                            IsRented = true,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4275)
                        },
                        new
                        {
                            Id = 4,
                            ApartmentBlock = "B",
                            ApartmentFloor = 5,
                            ApartmentNumber = 63,
                            ApartmentType = "2+1",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4276),
                            IsFull = true,
                            IsRented = true,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4277)
                        },
                        new
                        {
                            Id = 5,
                            ApartmentBlock = "D",
                            ApartmentFloor = 7,
                            ApartmentNumber = 87,
                            ApartmentType = "1+0",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4278),
                            IsFull = true,
                            IsRented = true,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4278)
                        },
                        new
                        {
                            Id = 6,
                            ApartmentBlock = "G",
                            ApartmentFloor = 13,
                            ApartmentNumber = 144,
                            ApartmentType = "3+0",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4279),
                            IsFull = true,
                            IsRented = true,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4279)
                        },
                        new
                        {
                            Id = 7,
                            ApartmentBlock = "E",
                            ApartmentFloor = 6,
                            ApartmentNumber = 78,
                            ApartmentType = "1+0",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4280),
                            IsFull = true,
                            IsRented = true,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4281)
                        },
                        new
                        {
                            Id = 8,
                            ApartmentBlock = "D",
                            ApartmentFloor = 3,
                            ApartmentNumber = 33,
                            ApartmentType = "1+1",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4282),
                            IsFull = true,
                            IsRented = true,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4282)
                        },
                        new
                        {
                            Id = 9,
                            ApartmentBlock = "A",
                            ApartmentFloor = 2,
                            ApartmentNumber = 19,
                            ApartmentType = "3+1",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4284),
                            IsFull = true,
                            IsRented = true,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4284)
                        },
                        new
                        {
                            Id = 10,
                            ApartmentBlock = "B",
                            ApartmentFloor = 9,
                            ApartmentNumber = 111,
                            ApartmentType = "2+1",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4287),
                            IsFull = true,
                            IsRented = true,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4287)
                        });
                });

            modelBuilder.Entity("ResiPay.DB.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bill_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    b.Property<decimal>("BillAmount")
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("amount");

                    b.Property<string>("BillType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("date")
                        .HasColumnName("assign_date");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("payment_status");

                    b.Property<int>("Month")
                        .HasMaxLength(30)
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("update_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Bill", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentId = 1,
                            BillAmount = 300m,
                            BillType = "gas",
                            DueDate = new DateTime(2023, 8, 30, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4163),
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4162),
                            IsPaid = false,
                            Month = 9,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4163),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ApartmentId = 2,
                            BillAmount = 220m,
                            BillType = "water",
                            DueDate = new DateTime(2023, 8, 23, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4169),
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4168),
                            IsPaid = false,
                            Month = 9,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4168),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ApartmentId = 3,
                            BillAmount = 140m,
                            BillType = "electric",
                            DueDate = new DateTime(2023, 8, 17, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4170),
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4170),
                            IsPaid = false,
                            Month = 8,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4170),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            ApartmentId = 3,
                            BillAmount = 50m,
                            BillType = "other",
                            DueDate = new DateTime(2023, 8, 28, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4173),
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4172),
                            IsPaid = true,
                            Month = 9,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4172),
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            ApartmentId = 4,
                            BillAmount = 80m,
                            BillType = "electric",
                            DueDate = new DateTime(2023, 8, 17, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4174),
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4173),
                            IsPaid = false,
                            Month = 8,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4174),
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            ApartmentId = 5,
                            BillAmount = 230m,
                            BillType = "electric",
                            DueDate = new DateTime(2023, 8, 13, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4176),
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4175),
                            IsPaid = true,
                            Month = 8,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4175),
                            UserId = 5
                        },
                        new
                        {
                            Id = 7,
                            ApartmentId = 6,
                            BillAmount = 600m,
                            BillType = "gas",
                            DueDate = new DateTime(2023, 8, 27, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4178),
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4177),
                            IsPaid = false,
                            Month = 8,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4178),
                            UserId = 6
                        },
                        new
                        {
                            Id = 8,
                            ApartmentId = 6,
                            BillAmount = 30m,
                            BillType = "other",
                            DueDate = new DateTime(2023, 8, 12, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4180),
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4179),
                            IsPaid = false,
                            Month = 8,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4179),
                            UserId = 6
                        },
                        new
                        {
                            Id = 9,
                            ApartmentId = 6,
                            BillAmount = 80m,
                            BillType = "water",
                            DueDate = new DateTime(2023, 8, 19, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4181),
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4181),
                            IsPaid = false,
                            Month = 8,
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4181),
                            UserId = 6
                        });
                });

            modelBuilder.Entity("ResiPay.DB.Entities.Card", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("ApartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("CVC")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("ResiPay.DB.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("message_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("content");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("date")
                        .HasColumnName("received_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_id");

                    b.Property<string>("ReceiverName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("receiver_name");

                    b.Property<string>("ReceiverSurname")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("receiver_surname");

                    b.Property<string>("SenderName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("sender_name");

                    b.Property<string>("SenderSurname")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("sender_surname");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("subject");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("read_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Message", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Sayın admin. Geceleri birinci kattan gelen yüksek müzik nedeniyle uyuyamıyoruz. Lütfen gereğini yapın!",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4100),
                            IsDeleted = false,
                            IsRead = false,
                            ReceiverId = 1,
                            Subject = "Müzik gürültüsü",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4100),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Content = "Asansördeki elektrik sürekli kopuyor ve tedirgin oluyoruz. Lütfen gereğini yapın",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4103),
                            IsDeleted = false,
                            IsRead = false,
                            ReceiverId = 1,
                            Subject = "Asansör Işığı",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4103),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Content = "Sayın komşu. Katınızda yarın sabah 9.00-11.00 saatleri arasında boru tadilatı yapılacaktır. Bilginize. Yönetici.",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4105),
                            IsDeleted = false,
                            IsRead = false,
                            ReceiverId = 2,
                            Subject = "Tadilat",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4105),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Sayın yönetici. Son günlerde sitemizde hırsızlık olayları artmıştır. Ailecek tedirgin oluyoruz. Lütfen gereğini yapın.",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4106),
                            IsDeleted = false,
                            IsRead = false,
                            ReceiverId = 1,
                            Subject = "Hırsız sorunu",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4106),
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Content = "Sayın yönetici. Çöplerimiz 3 gündür alınmıyor. Lütfen gereğini yapın.",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4107),
                            IsDeleted = false,
                            IsRead = false,
                            ReceiverId = 1,
                            Subject = "Çöpler",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4107),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("ResiPay.DB.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    b.Property<string>("CarPlate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("email");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("identity_number");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("date")
                        .HasColumnName("membership_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("delete_status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("surname");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("IdentityNumber");

                    b.ToTable("User", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentId = 1,
                            Email = "admin@gmail.com",
                            IdentityNumber = "82842683832",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3616),
                            IsActive = true,
                            IsDelete = false,
                            Name = "Beyza",
                            Password = "25b80b3556ca3a15353dd2fd312062fad27adcf5a1de51b75bdadea1fa8214ab",
                            PhoneNumber = "0555 555 55 55",
                            Status = "Admin",
                            Surname = "Cabuk",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3623)
                        },
                        new
                        {
                            Id = 2,
                            ApartmentId = 2,
                            Email = "e.yildirim@gmail.com",
                            IdentityNumber = "34965092008",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3810),
                            IsActive = true,
                            IsDelete = false,
                            Name = "Erkan",
                            Password = "25b80b3556ca3a15353dd2fd312062fad27adcf5a1de51b75bdadea1fa8214ab",
                            PhoneNumber = "0555 555 55 56",
                            Status = "Resident",
                            Surname = "Yıldırım",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3811)
                        },
                        new
                        {
                            Id = 3,
                            ApartmentId = 3,
                            Email = "s.yilmaz@gmail.com",
                            IdentityNumber = "78185721324",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3836),
                            IsActive = true,
                            IsDelete = false,
                            Name = "Serkan",
                            Password = "25b80b3556ca3a15353dd2fd312062fad27adcf5a1de51b75bdadea1fa8214ab",
                            PhoneNumber = "0555 555 55 57",
                            Status = "Resident",
                            Surname = "Yılmaz",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3836)
                        },
                        new
                        {
                            Id = 4,
                            ApartmentId = 4,
                            Email = "g.aslan@gmail.com",
                            IdentityNumber = "97968823406",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3856),
                            IsActive = true,
                            IsDelete = false,
                            Name = "Gürkan",
                            Password = "25b80b3556ca3a15353dd2fd312062fad27adcf5a1de51b75bdadea1fa8214ab",
                            PhoneNumber = "0555 555 55 58",
                            Status = "Resident",
                            Surname = "Aslan",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3857)
                        },
                        new
                        {
                            Id = 5,
                            ApartmentId = 5,
                            Email = "c.aslan@gmail.com",
                            IdentityNumber = "80829170948",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3901),
                            IsActive = true,
                            IsDelete = false,
                            Name = "Cansu",
                            Password = "25b80b3556ca3a15353dd2fd312062fad27adcf5a1de51b75bdadea1fa8214ab",
                            PhoneNumber = "0555 555 55 59",
                            Status = "Resident",
                            Surname = "Aslan",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3902)
                        },
                        new
                        {
                            Id = 6,
                            ApartmentId = 6,
                            Email = "b.kaplan@gmail.com",
                            IdentityNumber = "89076741888",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3922),
                            IsActive = true,
                            IsDelete = false,
                            Name = "Banu",
                            Password = "25b80b3556ca3a15353dd2fd312062fad27adcf5a1de51b75bdadea1fa8214ab",
                            PhoneNumber = "0555 555 55 60",
                            Status = "Resident",
                            Surname = "Kaplan",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3923)
                        },
                        new
                        {
                            Id = 7,
                            ApartmentId = 7,
                            Email = "h.atak@gmail.com",
                            IdentityNumber = "13060621122",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3940),
                            IsActive = true,
                            IsDelete = false,
                            Name = "Hülya",
                            Password = "25b80b3556ca3a15353dd2fd312062fad27adcf5a1de51b75bdadea1fa8214ab",
                            PhoneNumber = "0555 555 55 61",
                            Status = "Resident",
                            Surname = "Atak",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3940)
                        },
                        new
                        {
                            Id = 8,
                            ApartmentId = 8,
                            Email = "l.atak@gmail.com",
                            IdentityNumber = "25120656692",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3957),
                            IsActive = true,
                            IsDelete = false,
                            Name = "Leyla",
                            Password = "25b80b3556ca3a15353dd2fd312062fad27adcf5a1de51b75bdadea1fa8214ab",
                            PhoneNumber = "0555 555 55 62",
                            Status = "Resident",
                            Surname = "Atak",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3958)
                        },
                        new
                        {
                            Id = 9,
                            ApartmentId = 9,
                            Email = "a.gul@gmail.com",
                            IdentityNumber = "53465893878",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3998),
                            IsActive = true,
                            IsDelete = false,
                            Name = "Aslı",
                            Password = "25b80b3556ca3a15353dd2fd312062fad27adcf5a1de51b75bdadea1fa8214ab",
                            PhoneNumber = "0555 555 55 63",
                            Status = "Resident",
                            Surname = "Gül",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(3999)
                        },
                        new
                        {
                            Id = 10,
                            ApartmentId = 10,
                            Email = "i.yaylaci@gmail.com",
                            IdentityNumber = "55690108116",
                            InsertDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4017),
                            IsActive = true,
                            IsDelete = false,
                            Name = "İpek",
                            Password = "25b80b3556ca3a15353dd2fd312062fad27adcf5a1de51b75bdadea1fa8214ab",
                            PhoneNumber = "0555 555 55 64",
                            Status = "Resident",
                            Surname = "Yaylacı",
                            UpdateDate = new DateTime(2023, 8, 10, 4, 38, 24, 182, DateTimeKind.Local).AddTicks(4018)
                        });
                });

            modelBuilder.Entity("ApartmentUser", b =>
                {
                    b.HasOne("ResiPay.DB.Entities.Apartment", null)
                        .WithMany()
                        .HasForeignKey("ApartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResiPay.DB.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResiPay.DB.Entities.Bill", b =>
                {
                    b.HasOne("ResiPay.DB.Entities.Apartment", "Apartment")
                        .WithMany("Bills")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResiPay.DB.Entities.User", "User")
                        .WithMany("Bills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResiPay.DB.Entities.Card", b =>
                {
                    b.HasOne("ResiPay.DB.Entities.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResiPay.DB.Entities.Message", b =>
                {
                    b.HasOne("ResiPay.DB.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ResiPay.DB.Entities.Apartment", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("ResiPay.DB.Entities.User", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Cards");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
